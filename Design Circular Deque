//Design Circular Deque


class MyCircularDeque {

    private final int[] arr;
    private final int limit;
    int L;
    int R;
    int size;

    public MyCircularDeque(int k) {
        arr = new int[k];
        limit = k;
        size = 0;
    }

    public boolean insertFront(int value) {
        if (size == 0) {
            L = 0;
            R = 0;
            arr[0] = value;
            size++;

            return true;
        }
        if (size < limit) {
            L = L == 0 ? limit - 1 : L - 1;
            arr[L] = value;
            size++;

            return true;
        }

        return false;
    }

    public boolean insertLast(int value) {
        if (size == 0) {
            L = 0;
            R = 0;
            arr[0] = value;
            size++;
            return true;
        }
        if (size < limit) {
            R = R == limit - 1 ? 0 : R + 1;
            arr[R] = value;
            size++;
            return true;
        }
        return false;
    }

    public boolean deleteFront() {
        if (size == 0) {
            return false;
        }
        L = L == limit - 1 ? 0 : L + 1;
        size--;
        return true;
    }

    public boolean deleteLast() {
        if (size == 0) {
            return false;
        }
        R = R == 0 ? limit - 1 : R - 1;
        size--;
        return true;
    }

    public int getFront() {
        if (size == 0) {
            return -1;
        }
        return arr[L];
    }

    public int getRear() {
        if (size == 0) {
            return -1;
        }
        return arr[R];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == limit;
    }
}
